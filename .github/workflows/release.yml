name: Release

on:
  push:
    branches:
      - main

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      short_sha: ${{ steps.short_sha.outputs.sha }}
    steps:
      - name: Get short SHA
        id: short_sha
        run: echo "sha=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.short_sha.outputs.sha }}
          release_name: Release ${{ steps.short_sha.outputs.sha }}
          draft: true
          prerelease: false

  build-linux:
    runs-on: ubuntu-latest
    needs: create_release
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.25.2'
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libgl1-mesa-dev libxcursor-dev libxi-dev libxinerama-dev libxrandr-dev libxxf86vm-dev libasound2-dev
      - name: Build
        run: go build -v -o xandaris-ii
      - name: Archive
        run: tar -czvf xandaris-ii-linux-amd64.tar.gz xandaris-ii assets
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./xandaris-ii-linux-amd64.tar.gz
          asset_name: xandaris-ii-linux-amd64.tar.gz
          asset_content_type: application/gzip

  build-windows:
    runs-on: ubuntu-latest
    needs: create_release
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.25.2'
      - name: Build
        run: GOOS=windows GOARCH=amd64 go build -v -o xandaris-ii.exe -ldflags="-H=windowsgui"
      - name: Archive
        run: zip -r xandaris-ii-windows-amd64.zip xandaris-ii.exe assets
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./xandaris-ii-windows-amd64.zip
          asset_name: xandaris-ii-windows-amd64.zip
          asset_content_type: application/zip

  build-mac:
    runs-on: macos-latest
    needs: create_release
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.25.2'
      - name: Build
        run: go build -v -o xandaris-ii
      - name: Archive
        run: zip -r xandaris-ii-macos-amd64.zip xandaris-ii assets
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./xandaris-ii-macos-amd64.zip
          asset_name: xandaris-ii-macos-amd64.zip
          asset_content_type: application/zip

  publish_release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-mac, create_release]
    steps:
      - name: Publish Release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: '${{ needs.create_release.outputs.short_sha }}'
            });
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              draft: false
            });
